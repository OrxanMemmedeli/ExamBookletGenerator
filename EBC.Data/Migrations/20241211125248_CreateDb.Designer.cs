// <auto-generated />
using System;
using EBC.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EBC.Data.Migrations
{
    [DbContext(typeof(ExtendedDbContext))]
    [Migration("20241211125248_CreateDb")]
    partial class CreateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EBC.Data.Entities.AcademicYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("EBC.Data.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Base64")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileExtention")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NewFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("EBC.Data.Entities.AuthenticationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IPAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLoggedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("AuthenticationHistories");
                });

            modelBuilder.Entity("EBC.Data.Entities.Booklet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ExamId");

                    b.HasIndex("GradeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("VariantId");

                    b.ToTable("Booklets");
                });

            modelBuilder.Entity("EBC.Data.Entities.CombineEntities.CompanyUser", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("CompanyId", "UserId");

                    b.ToTable("CompanyUsers");
                });

            modelBuilder.Entity("EBC.Data.Entities.CombineEntities.QuestionAttahment", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("QuestionId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionId", "AttachmentId");

                    b.ToTable("QuestionAttahments");
                });

            modelBuilder.Entity("EBC.Data.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BlockedCompanyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DailyAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DebtLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPenal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStopSubscription")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("LogoFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PercentOfFine")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("EBC.Data.Entities.Exam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ExamParameterId");

                    b.HasIndex("GradeId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("EBC.Data.Entities.ExamParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("SubjectCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("ExamParameters");
                });

            modelBuilder.Entity("EBC.Data.Entities.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("EBC.Data.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("EBC.Data.Entities.Identity.OrganizationAdress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("OrganizationAdresses");
                });

            modelBuilder.Entity("EBC.Data.Entities.Identity.OrganizationAdressRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrganizationAdressId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "OrganizationAdressId");

                    b.HasIndex("OrganizationAdressId");

                    b.ToTable("OrganizationAdressRoles");
                });

            modelBuilder.Entity("EBC.Data.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EBC.Data.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EBC.Data.Entities.Identity.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("EBC.Data.Entities.PaymentOrDebt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("PaymentType");

                    b.ToTable("PaymentOrDebts");
                });

            modelBuilder.Entity("EBC.Data.Entities.PaymentSummary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("CurrentDebt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<decimal?>("TotalDebt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPayment")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("PaymentSummaries");
                });

            modelBuilder.Entity("EBC.Data.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TextId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("GradeId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("QuestionLevelId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TextId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("EBC.Data.Entities.QuestionLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<short>("Level")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("QuestionLevels");
                });

            modelBuilder.Entity("EBC.Data.Entities.QuestionParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EndQuestionNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("StartQuestionNumber")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubjectParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("SubjectParameterId");

                    b.ToTable("QuestionParameters");
                });

            modelBuilder.Entity("EBC.Data.Entities.QuestionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowAnswer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("ResponseCount")
                        .HasColumnType("float");

                    b.Property<string>("ResponseType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("QuestionTypes");
                });

            modelBuilder.Entity("EBC.Data.Entities.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AcademicYearId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrue")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("EBC.Data.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("EBC.Data.Entities.SendingEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.ToTable("SendingEmails");
                });

            modelBuilder.Entity("EBC.Data.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("AmountForQuestion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("EBC.Data.Entities.SubjectParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExamParameterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("QuestionCount")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("ExamParameterId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectParameters");
                });

            modelBuilder.Entity("EBC.Data.Entities.SysException", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Exception")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("UserIP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SysExceptions");
                });

            modelBuilder.Entity("EBC.Data.Entities.Text", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("EBC.Data.Entities.UserType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("EBC.Data.Entities.Variant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreateUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ModifyUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("IsDeleted")
                        .HasFilter("[IsDeleted] = 0");

                    b.HasIndex("ModifyUserId");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("EBC.Data.Entities.AcademicYear", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("AcademicYears")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("AcademicYearsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EBC.Data.Entities.Attachment", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("Attachments")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("AttachmentsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EBC.Data.Entities.AuthenticationHistory", b =>
                {
                    b.HasOne("EBC.Data.Entities.Company", "Company")
                        .WithMany("AuthenticationHistories")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EBC.Data.Entities.Booklet", b =>
                {
                    b.HasOne("EBC.Data.Entities.AcademicYear", "AcademicYear")
                        .WithMany("Booklets")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("Booklets")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Exam", "Exam")
                        .WithMany("Booklets")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Grade", "Grade")
                        .WithMany("Booklets")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Group", "Group")
                        .WithMany("Booklets")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("BookletsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Variant", "Variant")
                        .WithMany("Booklets")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("CreateUser");

                    b.Navigation("Exam");

                    b.Navigation("Grade");

                    b.Navigation("Group");

                    b.Navigation("ModifyUser");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("EBC.Data.Entities.CombineEntities.CompanyUser", b =>
                {
                    b.HasOne("EBC.Data.Entities.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "User")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EBC.Data.Entities.CombineEntities.QuestionAttahment", b =>
                {
                    b.HasOne("EBC.Data.Entities.Attachment", "Attachment")
                        .WithMany("QuestionAttahments")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Question", "Question")
                        .WithMany("QuestionAttahments")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("EBC.Data.Entities.Exam", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("Exams")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.ExamParameter", "ExamParameter")
                        .WithMany("Exams")
                        .HasForeignKey("ExamParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Grade", "Grade")
                        .WithMany("Exams")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("ExamsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ExamParameter");

                    b.Navigation("Grade");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EBC.Data.Entities.ExamParameter", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("ExamParameters")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("ExamParametersM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EBC.Data.Entities.Grade", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("Grades")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("GradesM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EBC.Data.Entities.Group", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("Groups")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("GroupsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EBC.Data.Entities.Identity.OrganizationAdressRole", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.OrganizationAdress", "OrganizationAdress")
                        .WithMany("OrganizationAdressRoles")
                        .HasForeignKey("OrganizationAdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.Role", "Role")
                        .WithMany("OrganizationAdressRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrganizationAdress");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EBC.Data.Entities.Identity.User", b =>
                {
                    b.HasOne("EBC.Data.Entities.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("EBC.Data.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EBC.Data.Entities.PaymentOrDebt", b =>
                {
                    b.HasOne("EBC.Data.Entities.Company", "Company")
                        .WithMany("Transactions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EBC.Data.Entities.PaymentSummary", b =>
                {
                    b.HasOne("EBC.Data.Entities.Company", "Company")
                        .WithOne("PaymentSummary")
                        .HasForeignKey("EBC.Data.Entities.PaymentSummary", "CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EBC.Data.Entities.Question", b =>
                {
                    b.HasOne("EBC.Data.Entities.AcademicYear", "AcademicYear")
                        .WithMany("Questions")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("Questions")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Grade", "Grade")
                        .WithMany("Questions")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("QuestionsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.QuestionLevel", "QuestionLevel")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.QuestionType", "QuestionType")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Section", "Section")
                        .WithMany("Questions")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Text", "Text")
                        .WithMany("Questions")
                        .HasForeignKey("TextId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AcademicYear");

                    b.Navigation("CreateUser");

                    b.Navigation("Grade");

                    b.Navigation("ModifyUser");

                    b.Navigation("QuestionLevel");

                    b.Navigation("QuestionType");

                    b.Navigation("Section");

                    b.Navigation("Subject");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("EBC.Data.Entities.QuestionLevel", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("QuestionLevels")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("QuestionLevelsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EBC.Data.Entities.QuestionParameter", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("QuestionParameters")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("QuestionParametersM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.QuestionType", "QuestionType")
                        .WithMany("QuestionParameters")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.SubjectParameter", "SubjectParameter")
                        .WithMany("QuestionParameters")
                        .HasForeignKey("SubjectParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("QuestionType");

                    b.Navigation("SubjectParameter");
                });

            modelBuilder.Entity("EBC.Data.Entities.QuestionType", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("QuestionTypes")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("QuestionTypesM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EBC.Data.Entities.Response", b =>
                {
                    b.HasOne("EBC.Data.Entities.AcademicYear", "AcademicYear")
                        .WithMany("Responses")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("Responses")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("ResponsesM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Question", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.QuestionType", "QuestionType")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Subject", "Subject")
                        .WithMany("Responses")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AcademicYear");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Question");

                    b.Navigation("QuestionType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EBC.Data.Entities.Section", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("Sections")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("SectionsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Subject", "Subject")
                        .WithMany("Sections")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EBC.Data.Entities.SendingEmail", b =>
                {
                    b.HasOne("EBC.Data.Entities.Company", "Company")
                        .WithMany("SendingEmails")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EBC.Data.Entities.Subject", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("Subjects")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("SubjectsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EBC.Data.Entities.SubjectParameter", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("SubjectParameters")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.ExamParameter", "ExamParameter")
                        .WithMany("SubjectParameters")
                        .HasForeignKey("ExamParameterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("SubjectParametersM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Subject", "Subject")
                        .WithMany("SubjectParameters")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreateUser");

                    b.Navigation("ExamParameter");

                    b.Navigation("ModifyUser");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("EBC.Data.Entities.Text", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("Texts")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("TextsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EBC.Data.Entities.Variant", b =>
                {
                    b.HasOne("EBC.Data.Entities.Identity.User", "CreateUser")
                        .WithMany("Variants")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EBC.Data.Entities.Identity.User", "ModifyUser")
                        .WithMany("VariantsM")
                        .HasForeignKey("ModifyUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifyUser");
                });

            modelBuilder.Entity("EBC.Data.Entities.AcademicYear", b =>
                {
                    b.Navigation("Booklets");

                    b.Navigation("Questions");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("EBC.Data.Entities.Attachment", b =>
                {
                    b.Navigation("QuestionAttahments");
                });

            modelBuilder.Entity("EBC.Data.Entities.Company", b =>
                {
                    b.Navigation("AuthenticationHistories");

                    b.Navigation("CompanyUsers");

                    b.Navigation("PaymentSummary")
                        .IsRequired();

                    b.Navigation("SendingEmails");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("EBC.Data.Entities.Exam", b =>
                {
                    b.Navigation("Booklets");
                });

            modelBuilder.Entity("EBC.Data.Entities.ExamParameter", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("SubjectParameters");
                });

            modelBuilder.Entity("EBC.Data.Entities.Grade", b =>
                {
                    b.Navigation("Booklets");

                    b.Navigation("Exams");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EBC.Data.Entities.Group", b =>
                {
                    b.Navigation("Booklets");
                });

            modelBuilder.Entity("EBC.Data.Entities.Identity.OrganizationAdress", b =>
                {
                    b.Navigation("OrganizationAdressRoles");
                });

            modelBuilder.Entity("EBC.Data.Entities.Identity.Role", b =>
                {
                    b.Navigation("OrganizationAdressRoles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("EBC.Data.Entities.Identity.User", b =>
                {
                    b.Navigation("AcademicYears");

                    b.Navigation("AcademicYearsM");

                    b.Navigation("Attachments");

                    b.Navigation("AttachmentsM");

                    b.Navigation("Booklets");

                    b.Navigation("BookletsM");

                    b.Navigation("CompanyUsers");

                    b.Navigation("ExamParameters");

                    b.Navigation("ExamParametersM");

                    b.Navigation("Exams");

                    b.Navigation("ExamsM");

                    b.Navigation("Grades");

                    b.Navigation("GradesM");

                    b.Navigation("Groups");

                    b.Navigation("GroupsM");

                    b.Navigation("QuestionLevels");

                    b.Navigation("QuestionLevelsM");

                    b.Navigation("QuestionParameters");

                    b.Navigation("QuestionParametersM");

                    b.Navigation("QuestionTypes");

                    b.Navigation("QuestionTypesM");

                    b.Navigation("Questions");

                    b.Navigation("QuestionsM");

                    b.Navigation("Responses");

                    b.Navigation("ResponsesM");

                    b.Navigation("Sections");

                    b.Navigation("SectionsM");

                    b.Navigation("SubjectParameters");

                    b.Navigation("SubjectParametersM");

                    b.Navigation("Subjects");

                    b.Navigation("SubjectsM");

                    b.Navigation("Texts");

                    b.Navigation("TextsM");

                    b.Navigation("UserRoles");

                    b.Navigation("Variants");

                    b.Navigation("VariantsM");
                });

            modelBuilder.Entity("EBC.Data.Entities.Question", b =>
                {
                    b.Navigation("QuestionAttahments");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("EBC.Data.Entities.QuestionLevel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EBC.Data.Entities.QuestionType", b =>
                {
                    b.Navigation("QuestionParameters");

                    b.Navigation("Questions");

                    b.Navigation("Responses");
                });

            modelBuilder.Entity("EBC.Data.Entities.Section", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EBC.Data.Entities.Subject", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Responses");

                    b.Navigation("Sections");

                    b.Navigation("SubjectParameters");
                });

            modelBuilder.Entity("EBC.Data.Entities.SubjectParameter", b =>
                {
                    b.Navigation("QuestionParameters");
                });

            modelBuilder.Entity("EBC.Data.Entities.Text", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EBC.Data.Entities.UserType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EBC.Data.Entities.Variant", b =>
                {
                    b.Navigation("Booklets");
                });
#pragma warning restore 612, 618
        }
    }
}
